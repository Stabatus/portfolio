---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { getEntries } from "astro:content";
import ParodyCertified from "@/comp/ParodyCertified/ParodyCertified.astro";
import WorkHighlight from "@/comp/WorkHighlight/WorkHighlight.astro";
import Work from "@/comp/Work/Work.astro";
import TestimonialsContainer from "@/comp/testionmials/TestimonialsContainer.astro";
import TrainingSection from "@/comp/TrainingSection/TrainingSection.astro";
import LolRank from "@/comp/LolRank/LolRank.astro";
import SpotifyPlaylist from "@/comp/SpotifyPlaylist/SpotifyPlaylist.astro";
import { Image } from "astro:assets";
import PhotoITook from "../components/PhotoItook/PhotoITook.astro";
import ExperienceSection from "../components/ExperienceSection/ExperienceSection.astro";

const homeEntries = await getCollection("home");

const {
  title,
  subtitle,
  description,
  lastUpdate,
  schools,
  testimonials,
  relatedProject,
  aboutMe_desc,
  aboutMe_title,
  aboutMe_pic,
  expertise,
  training,
  lolRank,
  photo_i_took_title,
  photo_i_took,
  skills,
  skills_indevelopment,
  tools
} = homeEntries[0].data;

const credentials = (await getCollection("credentials"))[0].data;

const expertiseData = await getEntries(expertise);

const projectData = await getEntries(relatedProject);

const lastDayPublish = new Intl.DateTimeFormat("fr-FR", {
  year: "numeric",
  month: "long",
  day: "numeric"
}).format(lastUpdate);

const randomNumbers: number[] = [];

while (randomNumbers.length < 7) {
  const randomNumber = Math.floor(Math.random() * 9);
  if (!randomNumbers.includes(randomNumber)) {
    randomNumbers.push(randomNumber);
  }
}

const firstStack = randomNumbers.slice(0, 3) as [number, number, number];
const secondStack = randomNumbers.slice(3, 6) as [number, number, number];
---

<Layout
  title="Ruben Letist - Digital Creative"
  description="Portfolio de Ruben Letist, Designer d'interface UX et UI et Développeur créatif"
>
  <header>
    <section class="nav_container">
      <strong>Ruben Letist</strong>
      <nav>
        <a href="#">Curriculum vitae</a>
        <a
          href={credentials.instagram}
          target="_blank"
          >Instagram</a
        >
        <a
          href={credentials.linkedin}
          target="_blank"
          >Linkedin</a
        >
      </nav>
    </section>

    <section class="hero">
      <div>
        <p>{description}</p>
        <p>
          Dernière mise à jour : {lastDayPublish}
        </p>
      </div>
      <div class="hero__title">
        <h1>{title}</h1>
        <h2>{subtitle}</h2>
      </div>
    </section>
    <hr />
    <footer>
      <ParodyCertified schools={schools} />
      <TestimonialsContainer
        testimonials={testimonials}
        randomNumberStack={firstStack}
      />
    </footer>
  </header>
  <main>
    <nav class="project_highlight">
      {
        projectData.slice(0, 2).map(({ data }) => {
          const { title, subTitle, heroImage, timing, heroImage_alt } = data;
          return (
            <WorkHighlight
              title={title}
              subTitle={subTitle}
              heroImage={heroImage}
              heroImage_alt={heroImage_alt}
              timing={timing}
            />
          );
        })
      }
    </nav>
    <TestimonialsContainer
      testimonials={testimonials}
      randomNumberStack={secondStack}
    />

    <hr />
    <section class="aboutme">
      <div>
        <h3>{aboutMe_title}</h3>
        <p>{aboutMe_desc}</p>
        <a href="#">A propos de moi</a>
      </div>
      <Image
        src={aboutMe_pic[0]}
        alt={aboutMe_pic[1]}
      />
    </section>

    <section class="infinite__loop">
      <span>
        {
          [
            ...tools,
            ...skills,
            ...skills_indevelopment,
            ...tools,
            ...skills,
            ...skills_indevelopment,
            ...tools,
            ...skills,
            ...skills_indevelopment
          ].map((tool) => {
            return <span class="infinite__loop__content">{tool} </span>;
          })
        }
      </span>
    </section>

    <ExperienceSection experience={expertise} />

    <hr />
    <nav class="projects">
      {
        projectData.slice(2, 5).map(({ data }) => {
          const { title, subTitle, heroImage, timing, heroImage_alt } = data;
          return (
            <Work
              title={title}
              subTitle={subTitle}
              heroImage={heroImage}
              timing={timing}
              heroImage_alt={heroImage_alt}
            />
          );
        })
      }
    </nav>
  </main>
</Layout>

<style>
  section.nav_container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    padding: 1.6rem 0;
  }

  section.nav_container strong {
    font-size: 1.6rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  section.nav_container nav {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1.6rem;
  }

  div.hero__title {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    gap: 0.4rem;
    width: 70%;
  }

  h1 {
    font-size: 6.4rem;
    font-weight: 600;
    line-height: 1;
    margin: 0;
  }

  @media screen and (min-width: 769px) {
    h1 {
      font-size: 8.8rem;
    }
  }

  h2 {
    font-size: 1.6rem;
    color: var(--grey-color);
    font-weight: 400;
  }
  header {
    margin-bottom: 2.4rem;
  }

  header > footer {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }

  hr {
    margin-top: 2.4rem;
    margin-bottom: 2.4rem;
  }

  section.hero {
    display: flex;
    flex-direction: row;
    align-items: flex-end;
    justify-content: space-between;
    padding-top: 35dvh;
  }

  section.hero div {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  section.hero p {
    max-width: 35ch;
    font-size: 1.4rem;
    line-height: 1.4;
    color: var(--grey-color);
  }

  nav.project_highlight,
  nav.projects {
    display: flex;
    flex-direction: row;
    gap: 1.6rem;
    margin-bottom: 2.4rem;
  }

  nav.projects {
    margin-top: 1.6rem;
    margin-bottom: 4.8rem;
  }

  section.aboutme {
    margin-bottom: 4.8rem;
    display: flex;
    justify-content: flex-end;
    gap: 2.4rem;
  
    &  div {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
      width: 60ch;
    }

    & div p {
      margin: 0;
      font-size: 2.8rem;
      line-height: 140%;
    }

    & div h3 {
      margin: 0;
      font-weight: 400;
      font-size: 1.6rem;
      color: var(--grey-color);
    }
}
  .infinite__loop {
    width: 100%;
    white-space: nowrap;
    position: relative;
    left: 0;
    margin-bottom: 2.4rem;
    overflow: hidden;

    & > span {
      display: inline-block;
      animation: infiniteloop infinite 30s linear;
      & > .infinite__loop__content {
        font-size: 2.1rem;
        color: var(--grey-color);
        margin-right: 1.2rem;
      }
    }
  }

  @media screen and (max-width: 769px) {
    .infinite__loop {
      width: calc(100vw - 21px);
    }
  }

  @keyframes infiniteloop {
    from {
      transform: translateX(0);
    }

    to {
      transform: translateX(-50%);
    }
  }

  section.misc {
    display: flex;
    gap: 2.4rem;
    margin-bottom: 4.8rem;
  }
</style>
